{"version":3,"sources":["components/Login/LoginForm.tsx","components/Login/Login.tsx","components/MainPage/Header/Header.tsx","api/api.ts","state/reducer.ts","components/common/AddItemForm.tsx","components/common/EditableSpan.tsx","components/MainPage/Contacts/Contact/Contact.tsx","components/MainPage/Contacts/Contacts.tsx","components/MainPage/ContactList/ContactList.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["LoginReduxForm","reduxForm","form","props","handleSubmit","Form","onSubmit","Field","component","name","placeholder","type","Login","React","useState","isAuth","setIsAuth","to","formData","axios","post","email","password","alert","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","classes","className","AppBar","Toolbar","Button","variant","IconButton","edge","aria-label","Typography","noWrap","instance","baseURL","api","tel","then","res","data","get","contactId","delete","patch","initialState","AddItemForm","newItemTitle","setNewItemTitle","newItemTel","error","setError","TextField","value","onChange","e","currentTarget","onKeyPress","ctrlKey","charCode","addItem","label","onClick","trim","AddBox","EditableSpan","editMode","setEditMode","newTitle","setNewTitle","deActiveEditMode","autoFocus","onBlur","fontSize","Contact","open","setOpen","handleClick","ListItem","key","contact","id","onChangeTitle","ExpandLess","ExpandMore","onRemoveHandler","Collapse","in","timeout","unmountOnExit","ListItemIcon","onChangeTel","Contacts","setSearch","contactList","useSelector","state","filtered","setFiltered","isHidden","setIsHidden","useEffect","filter","c","toLowerCase","includes","onDoubleClick","target","map","removeContact","changeTitle","changeTel","ContactList","dispatch","useDispatch","Grid","item","List","style","newContact","addContactAC","addNewContact","deleteContact","getState","changeContactsTitleAC","updateContactTitle","changeContactsTelAC","updateContactTel","App","path","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","find","reducerForm","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qTAyBaA,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAtBZ,SAACE,GACQA,EAAhBC,aAEP,OAAO,oCACH,sCACA,2EACA,sDACA,+CAEA,2DACA,6BAEA,kBAACC,EAAA,EAAD,CAAMC,SAAUH,EAAMC,cAClB,kBAACG,EAAA,EAAD,CAAOC,UAAW,QAASC,KAAM,QAASC,YAAY,UAAS,6BAC/D,kBAACH,EAAA,EAAD,CAAOC,UAAW,QAASC,KAAM,WAAYC,YAAY,WAAWC,KAAM,aAC1E,6BACI,iD,yBCSDC,MAvBf,WAAkB,IAAD,EAEeC,IAAMC,UAAS,GAF9B,mBAENC,EAFM,KAEEC,EAFF,KAcb,OAAID,EAAe,kBAAC,IAAD,CAAUE,GAAG,kBAG5B,6BACI,kBAACjB,EAAD,CAAgBM,SAdP,SAACY,GACdC,IAAMC,KAAK,gDAAiDF,GACrC,mBAAnBA,EAASG,OAAoD,SAAtBH,EAASI,SAChDN,GAAU,IAEVO,MAAM,SACNP,GAAU,S,uFCLhBQ,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,MAAM,aACFJ,SAAU,EACVK,QAAS,QACRR,EAAMS,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,UAGjBG,OAAO,aACHC,SAAU,WACVC,aAAcb,EAAMc,MAAMD,aAC1BE,gBAAiBC,YAAKhB,EAAMiB,QAAQC,OAAOC,MAAO,KAClD,UAAW,CACPJ,gBAAiBC,YAAKhB,EAAMiB,QAAQC,OAAOC,MAAO,MAEtDC,WAAY,EACZC,MAAO,QACNrB,EAAMS,YAAYC,GAAG,MAAQ,CAC1BU,WAAYpB,EAAMM,QAAQ,GAC1Be,MAAO,SAGfC,WAAY,CACRC,QAASvB,EAAMM,QAAQ,EAAG,GAC1BkB,OAAQ,OACRZ,SAAU,WACVa,cAAe,OACfjB,QAAS,OACTkB,WAAY,SACZC,eAAgB,UAEpBC,UAAW,CACPC,MAAO,WAEXC,WAAW,aACPP,QAASvB,EAAMM,QAAQ,EAAG,EAAG,EAAG,GAEhCyB,YAAY,cAAD,OAAgB/B,EAAMM,QAAQ,GAA9B,OACX0B,WAAYhC,EAAMiC,YAAYC,OAAO,SACrCb,MAAO,QACNrB,EAAMS,YAAYC,GAAG,MAAQ,CAC1BW,MAAO,OACP,UAAW,CACPA,MAAO,eAOZ,SAASc,IACpB,IAAMC,EAAUtC,IAChB,OACI,yBAAKuC,UAAWD,EAAQlC,MACpB,kBAACoC,EAAA,EAAD,CAAQ1B,SAAS,UACb,kBAAC2B,EAAA,EAAD,KACI,kBAAC,IAAD,CAAShD,GAAI,UAAU,kBAACiD,EAAA,EAAD,CACnBvD,KAAK,SACLwD,QAAQ,YACRZ,MAAM,WAHa,UAMvB,kBAACa,EAAA,EAAD,CACIC,KAAK,QACLN,UAAWD,EAAQhC,WACnByB,MAAM,UACNe,aAAW,gBAGf,kBAACC,EAAA,EAAD,CAAYR,UAAWD,EAAQ7B,MAAOkC,QAAQ,KAAKK,QAAM,GAAzD,oB,uCC1EPC,EAAWtD,IAAMyC,OAAO,CACjCc,QAVqB,yDAaZC,EAAM,SACD1C,GACV,OAAOwC,EAASrD,KAA2C,IAAK,CAACa,MAAOA,EAAO2C,IAAK,iBAAiBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFhHJ,EAAM,WAKX,OAAOF,EAASO,IAA2B,KAAKH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAL3DJ,EAAM,SAQDM,GACV,OAAOR,EAASS,OAAT,WAAuCD,IAAaJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SATtEJ,EAAM,SAYIM,EAAmBhD,GAClC,OAAOwC,EAASU,MAAT,WAAmBF,GAAa,CAAChD,MAAOA,IAAQ4C,MAAK,SAAAC,GACxD,OAAQA,EAAIC,SAdXJ,EAAM,SAiBEM,EAAmBL,GAChC,OAAOH,EAASU,MAAT,WAAmBF,GAAa,CAACL,IAAKA,IAAMC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCCrEK,EAAmC,G,0BCe1BC,MA1Cf,SAAqBlF,GAAmB,IAAD,EACGW,mBAAS,IADZ,mBAC9BwE,EAD8B,KAChBC,EADgB,OAEDzE,mBAAS,IAFR,mBAE9B0E,EAF8B,aAGX1E,mBAAwB,OAHb,mBAG9B2E,EAH8B,KAGvBC,EAHuB,KA2BnC,OACI,yBAAK3B,UAAU,eACX,kBAAC4B,EAAA,EAAD,CAAWxB,QAAQ,WACRyB,MAAON,EACPO,SA1Ba,SAACC,GAEzBP,EAAgBO,EAAEC,cAAcH,QAyBrBI,WAtBO,SAACF,GACvBJ,EAAS,MACLI,EAAEG,SAA0B,KAAfH,EAAEI,WACf/F,EAAMgG,QAAQb,EAAcE,GAC5BD,EAAgB,MAmBLE,QAASA,EACTW,MAAO,oBAElB,kBAAChC,EAAA,EAAD,CAAYb,MAAO,UAAW8C,QAlBtB,WACgB,KAAxBf,EAAagB,QACbnG,EAAMgG,QAAQb,EAAcE,GAC5BD,EAAgB,KAEhBG,EAAS,uBAauC,kBAACa,EAAA,EAAD,S,mGCA7CC,OAnCf,SAAsBrG,GAAmB,IAAD,EAENW,oBAAkB,GAFZ,mBAE/B2F,EAF+B,KAErBC,EAFqB,OAGN5F,mBAAiBX,EAAMyF,OAHjB,mBAG/Be,EAH+B,KAGrBC,EAHqB,KAS9BC,EAAmB,WACrBH,GAAY,GACZvG,EAAM0F,SAASc,IAWnB,OACIF,EACM,kBAACd,EAAA,EAAD,CAAWxB,QAAQ,WACjByB,MAAOe,EACPG,WAAW,EACXjB,SAdY,SAACC,GACrBc,EAAYd,EAAEC,cAAcH,QAcpBI,WAZc,SAACF,GACJ,KAAfA,EAAEI,WACF/F,EAAM0F,SAASc,GACfE,MAUIE,OAAQF,IAEV,8BAAO1G,EAAMyF,MAAb,IAAoB,kBAAC,IAAD,CAAUS,QA1BjB,WACnBK,GAAY,GACZE,EAAYzG,EAAMyF,QAwB2CoB,SAAU,QAASzD,MAAO,cCOhF0D,OA1Bf,SAAiB9G,GAAmB,IAAD,EACPU,IAAMC,UAAS,GADR,mBACxBoG,EADwB,KAClBC,EADkB,KAGzBC,EAAc,WAChBD,GAASD,IAEb,OACI,6BACI,kBAACG,EAAA,EAAD,CAAUC,IAAKnH,EAAMoH,QAAQC,IACzB,kBAAC,GAAD,CAAc5B,MAAOzF,EAAMoH,QAAQtF,MAAO4D,SAAU1F,EAAMsH,gBACzDP,EAAO,kBAACQ,EAAA,EAAD,CAAYrB,QAASe,IAAiB,kBAACO,EAAA,EAAD,CAAYtB,QAASe,IACnE,kBAAChD,EAAA,EAAD,CAAYiC,QAASlG,EAAMyH,iBAAiB,kBAAC,IAAD,CAAkBrE,MAAO,YAEzE,kBAACsE,EAAA,EAAD,CAAUC,GAAIZ,EAAMa,QAAQ,OAAOC,eAAa,GAC5C,kBAACX,EAAA,EAAD,KACI,kBAACY,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAAC,GAAD,CAAcrC,MAAOzF,EAAMoH,QAAQ3C,IAAKiB,SAAU1F,EAAM+H,kB,qBCqB7DC,OA7Cf,SAAkBhI,GAAmB,IAAD,EACJW,mBAAS,IADL,mBACzBuB,EADyB,KACjB+F,EADiB,KAE1BC,EAAcC,aAAkD,SAAAC,GAAK,OAAIA,EAAMF,eAFrD,EAGAvH,mBAASuH,GAHT,mBAGzBG,EAHyB,KAGfC,EAHe,OAIA3H,oBAAS,GAJT,mBAIzB4H,EAJyB,KAIfC,EAJe,KAM1BvB,EAAc,WAChBuB,GAAaD,IAQjB,OANAE,qBAAU,WACNH,EAAYJ,EAAYQ,QAAO,SAAAC,GAAC,OAC5BA,EAAE7G,MAAM8G,cAAcC,SAAS3G,EAAO0G,qBAE3C,CAAC1G,EAAQgG,IAEL,6BACDK,EAOI,kBAAC,KAAD,CAAYrC,QAASe,IANrB,2BACE6B,cAAe7B,EACfzG,KAAK,OACLD,YAAY,oBACZmF,SAAU,SAAAC,GAAC,OAAIsC,EAAUtC,EAAEoD,OAAOtD,UAIzC4C,EAASW,KAAI,SAAAL,GAUV,OAAO,oCACH,kBAAC,GAAD,CAASxB,IAAKwB,EAAEtB,GAAII,gBAVA,WACpBzH,EAAMiJ,cAAcN,EAAEtB,KASgCC,cAPpC,SAACxF,GACnB9B,EAAMkJ,YAAYP,EAAEtB,GAAIvF,IAOfiG,YALO,SAACtD,GACjBzE,EAAMmJ,UAAUR,EAAEtB,GAAI5C,IAKb2C,QAASuB,UCcnBS,OA5Cf,WACI,IAAMlB,EAAcC,aAAkD,SAAAC,GAAK,OAAIA,EAAMF,eAC/EmB,EAAWC,cAyBjB,OAvBAb,qBAAU,WACFP,GACAmB,GL8DmC,SAACA,GAC5C7E,IACKE,MAAK,SAAAC,GACF0E,EAtBD,CAAC7I,KAAM,mBAAoB0H,YAsBJvD,YK/D3B,IAoBC,yBAAKf,UAAW,eACZ,kBAAC2F,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAC5G,QAAS,SACnB,kBAAC,EAAD,CAAakD,QAjB7B,SAAoBlE,GAChBuH,EL4DqB,SAACvH,GAAD,OAA8B,SAACuH,GACxD7E,EAAkB1C,GACb4C,MAAK,SAAAC,GAGF0E,EA1BgB,SAACM,GACzB,MAAO,CAACnJ,KAAM,cAAemJ,cAyBZC,CAFQjF,QK/DZkF,CAAc/H,OAiBX,kBAAC,GAAD,CAAUoG,YAAaA,EACbe,cAvB1B,SAAuBnE,GACnBuE,ELyEqB,SAACvE,GAAD,OAAkC,SAACuE,GAC5D7E,EAAkBM,GACbJ,MAAK,SAAAC,GACF0E,EAnCD,CAAC7I,KAAM,iBAAkB6G,GAmCCvC,QK5EpBgF,CAAchF,KAuBDoE,YAhB1B,SAAqB7B,EAAYvF,GAC7BuH,ELwE0B,SAACvE,EAAmBhD,GAApB,OAAiD,SAACuH,EAA6BU,GAC7GvF,EAAuBM,EAAWhD,GAC7B4C,MAAK,SAAAC,GACF0E,EArCyB,SAAChC,EAAYvF,GAC9C,MAAO,CAACtB,KAAM,uBAAwB6G,KAAIvF,SAoCzBkI,CAAsBlF,EAAWhD,QK3ErCmI,CAAmB5C,EAAIvF,KAgBVqH,UAb1B,SAAmB9B,EAAY5C,GAC3B4E,EL0EwB,SAAC5E,EAAaK,GAAd,OAA+C,SAACuE,EAA6BU,GACzGvF,EAAqBC,EAAKK,GACrBJ,MAAK,SAAAC,GACF0E,EAxCuB,SAAChC,EAAY5C,GAC5C,MAAO,CAACjE,KAAM,qBAAsB6G,KAAI5C,OAuCvByF,CAAoBzF,EAAKK,QK7E7BqF,CAAiB9C,EAAI5C,WC1BvB2F,OAbf,WAEI,OACI,yBAAKxG,UAAU,OACX,kBAACF,EAAD,MACA,6BACI,kBAAC,IAAD,CAAO2G,KAAK,SAASC,OAAQ,kBAAM,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOD,KAAK,gBAAgBC,OAAQ,kBAAM,kBAAC,GAAD,YCFtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2CCXAC,GAAcC,2BAAgB,CAChC3C,YR6B2B,WAAwF,IAAvFE,EAAsF,uDAA1DnD,EAAc6F,EAA4C,uCAClH,OAAQA,EAAOtK,MACX,IAAK,iBACD,OAAO4H,EAAMM,QAAO,SAAAC,GAAC,OAAIA,EAAEtB,IAAMyD,EAAOzD,MAE5C,IAAK,cACD,MAAM,GAAN,mBAAWe,GAAX,CAAkB,CACdf,GAAIyD,EAAOnB,WAAWtC,GACtBvF,MAAOgJ,EAAOnB,WAAW7H,MACzB2C,IAAK,kBAIb,IAAK,uBACD,IAAMyD,EAAcE,EAAM2C,MAAK,SAAApC,GAAC,OAAIA,EAAEtB,KAAOyD,EAAOzD,MAIpD,OAHIa,IACAA,EAAYpG,MAAQgJ,EAAOhJ,OAExB,YAAIsG,GAEf,IAAK,qBACD,IAAMF,EAAcE,EAAM2C,MAAK,SAAApC,GAAC,OAAIA,EAAEtB,KAAOyD,EAAOzD,MAIpD,OAHIa,IACAA,EAAYzD,IAAMqG,EAAOrG,KAEtB,YAAI2D,GAEf,IAAK,mBACD,IAAMF,EAAc4C,EAAO5C,YAAYc,KAAI,SAAAL,GAAC,sBAASA,MACrD,OAAO,YAAIT,GACf,QACI,OAAOE,IQ3DfrI,KAAMiL,OAGGC,GAAQC,uBAAYN,GAAaO,+BAAoBC,2BAAgBC,QCFlFC,IAAShB,OACL,kBAAC,IAAD,KACF,kBAAC,IAAD,CAAUW,MAAOA,IACf,kBAAC,GAAD,QAGFM,SAASC,eAAe,SF2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjH,MAAK,SAAAkH,GACJA,EAAaC,gBAEdC,OAAM,SAAAxG,GACLyG,QAAQzG,MAAMA,EAAM0G,c","file":"static/js/main.69a6c992.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Field, Form, reduxForm} from \"redux-form\";\r\n\r\nconst LoginForm = (props: any) => {\r\n    const {handleSubmit} = props;\r\n\r\n    return <>\r\n        <h2>Hello!</h2>\r\n        <span>If you want to try using this app, enter:</span>\r\n        <div>email: test@gmail.com</div>\r\n        <div>password: test</div>\r\n\r\n        <div>Never enter your real data</div>\r\n        <br/>\r\n\r\n        <Form onSubmit={props.handleSubmit}>\r\n            <Field component={\"input\"} name={'email'} placeholder='Email'/><br/>\r\n            <Field component={\"input\"} name={'password'} placeholder='Password' type={'password'}/>\r\n            <div>\r\n                <button>Sing in</button>\r\n            </div>\r\n        </Form></>\r\n}\r\n\r\n\r\nexport const LoginReduxForm = reduxForm({form: 'login'})(LoginForm);","import React from 'react';\r\nimport {LoginReduxForm} from \"./LoginForm\";\r\nimport axios from 'axios';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nfunction Login() {\r\n\r\n    const [isAuth, setIsAuth] = React.useState(false);\r\n\r\n    const sendForm = (formData: any) => {\r\n        axios.post('https://test-app-contacts.herokuapp.com/login', formData)\r\n        if (formData.email === \"test@gmail.com\" && formData.password === \"test\") {\r\n            setIsAuth(true);\r\n        } else {\r\n            alert('error')\r\n            setIsAuth(false);\r\n        }\r\n    }\r\n\r\n    if (isAuth) return <Redirect to=\"/contactsList\"/>;\r\n\r\n    return (\r\n        <div>\r\n            <LoginReduxForm onSubmit={sendForm}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {createStyles, fade, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n        search: {\r\n            position: 'relative',\r\n            borderRadius: theme.shape.borderRadius,\r\n            backgroundColor: fade(theme.palette.common.white, 0.15),\r\n            '&:hover': {\r\n                backgroundColor: fade(theme.palette.common.white, 0.25),\r\n            },\r\n            marginLeft: 0,\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                marginLeft: theme.spacing(1),\r\n                width: 'auto',\r\n            },\r\n        },\r\n        searchIcon: {\r\n            padding: theme.spacing(0, 2),\r\n            height: '100%',\r\n            position: 'absolute',\r\n            pointerEvents: 'none',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n        },\r\n        inputRoot: {\r\n            color: 'inherit',\r\n        },\r\n        inputInput: {\r\n            padding: theme.spacing(1, 1, 1, 0),\r\n            // vertical padding + font size from searchIcon\r\n            paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n            transition: theme.transitions.create('width'),\r\n            width: '100%',\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: '12ch',\r\n                '&:focus': {\r\n                    width: '20ch',\r\n                },\r\n            },\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function SearchAppBar() {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <NavLink to={'/login'}><Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\">\r\n                        Login\r\n                    </Button></NavLink>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                    >\r\n                    </IconButton>\r\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                        Your contacts\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import axios from 'axios';\r\nimport {ContactListType, ContactType} from \"../components/MainPage/ContactList/ContactList\";\r\n\r\nconst API_BASE_ADDRESS = 'https://test-app-contacts.herokuapp.com/contactsList';\r\n\r\ntype CommonApiType<T> = {\r\n      items: ContactListType\r\n      data: T\r\n}\r\nexport type GetContactListApiType = Array<ContactType>\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: API_BASE_ADDRESS,\r\n})\r\n\r\nexport const api = {\r\n    createContact(title: string) {\r\n        return instance.post<CommonApiType<{ item: ContactType }>>('/', {title: title, tel: 'Entry number'}).then(res => res.data)\r\n    },\r\n    getContactsList() {\r\n        return instance.get<GetContactListApiType>('/').then(res => res.data)\r\n    },\r\n\r\n    deleteContact(contactId: string) {\r\n        return instance.delete<CommonApiType<{}>>(`/${contactId}`).then(res => res.data)\r\n    },\r\n\r\n    updateContactTitle(contactId: string, title: string) {\r\n        return instance.patch(`/${contactId}`, {title: title}).then(res => {\r\n            return  res.data\r\n        })\r\n    },\r\n    updateContactTel(contactId: string, tel: string) {\r\n        return instance.patch(`/${contactId}`, {tel: tel}).then(res => res.data)\r\n    }\r\n\r\n}\r\n","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from './store';\r\nimport {api} from \"../api/api\";\r\nimport {ContactListType, ContactType} from \"../components/MainPage/ContactList/ContactList\";\r\n\r\nexport type RemoveContactsActionType = {\r\n    type: 'REMOVE-CONTACT',\r\n    id: string\r\n}\r\n\r\nexport type AddContactsActionType = {\r\n    type: 'ADD-CONTACT',\r\n    newContact: ContactType\r\n\r\n}\r\nexport type ChangeContactsTitleActionType = {\r\n    type: 'CHANGE-CONTACT-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeContactsTelActionType = {\r\n    type: 'CHANGE-CONTACT-TEL',\r\n    id: string\r\n    tel: string\r\n}\r\nexport type SetContactsActionType = {\r\n    type: 'SET-CONTACT-LIST',\r\n    contactList: ContactListType\r\n}\r\n\r\n\r\ntype ActionsType = RemoveContactsActionType | AddContactsActionType\r\n    | ChangeContactsTitleActionType | SetContactsActionType | ChangeContactsTelActionType\r\n\r\n\r\nconst initialState: Array<ContactType> = []\r\n\r\nexport const contactsReducer = (state: Array<ContactType> = initialState, action: ActionsType): Array<ContactType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-CONTACT': {\r\n            return state.filter(c => c.id != action.id)\r\n        }\r\n        case 'ADD-CONTACT': {\r\n            return [...state, {\r\n                id: action.newContact.id,\r\n                title: action.newContact.title,\r\n                tel: 'Entry number'\r\n            }]\r\n        }\r\n\r\n        case 'CHANGE-CONTACT-TITLE': {\r\n            const contactList = state.find(c => c.id === action.id);\r\n            if (contactList) {\r\n                contactList.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-CONTACT-TEL': {\r\n            const contactList = state.find(c => c.id === action.id);\r\n            if (contactList) {\r\n                contactList.tel = action.tel;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-CONTACT-LIST':\r\n            const contactList = action.contactList.map(c => ({...c}))\r\n            return [...contactList]\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const setContactAC = (contactList: ContactListType): SetContactsActionType => {\r\n    return {type: 'SET-CONTACT-LIST', contactList}\r\n}\r\nexport const removeContactAC = (id: string): RemoveContactsActionType => {\r\n    return {type: 'REMOVE-CONTACT', id}\r\n}\r\nexport const addContactAC = (newContact: ContactType): AddContactsActionType => {\r\n    return {type: 'ADD-CONTACT', newContact}\r\n}\r\nexport const changeContactsTitleAC = (id: string, title: string): ChangeContactsTitleActionType => {\r\n    return {type: 'CHANGE-CONTACT-TITLE', id, title}\r\n}\r\nexport const changeContactsTelAC = (id: string, tel: string): ChangeContactsTelActionType => {\r\n    return {type: 'CHANGE-CONTACT-TEL', id, tel}\r\n}\r\n\r\n//Thunk\r\nexport type ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>\r\nexport type ThunkDispatchType = ThunkDispatch<AppRootStateType, {}, ActionsType>\r\n\r\nexport const setContactList = (): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.getContactsList()\r\n        .then(res => {\r\n            dispatch(setContactAC(res))\r\n        });\r\n}\r\n\r\nexport const addNewContact = (title: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.createContact(title)\r\n        .then(res => {\r\n            let newContact = res;\r\n            // @ts-ignore\r\n            dispatch(addContactAC(newContact))\r\n        });\r\n}\r\n\r\nexport const deleteContact = (contactId: string): ThunkType => (dispatch: ThunkDispatchType) => {\r\n    api.deleteContact(contactId)\r\n        .then(res => {\r\n            dispatch(removeContactAC(contactId));\r\n        });\r\n}\r\n\r\nexport const updateContactTitle = (contactId: string, title: string): ThunkType => (dispatch: ThunkDispatchType, getState) => {\r\n    api.updateContactTitle(contactId, title)\r\n        .then(res => {\r\n            dispatch(changeContactsTitleAC(contactId, title));\r\n        });\r\n}\r\nexport const updateContactTel = (tel: string, contactId: string): ThunkType => (dispatch: ThunkDispatchType, getState) => {\r\n    api.updateContactTel(tel, contactId)\r\n        .then(res => {\r\n            dispatch(changeContactsTelAC(tel, contactId));\r\n        });\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    addItem: (title: string, tel: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: PropsType) {\r\n    let [newItemTitle, setNewItemTitle] = useState('')\r\n    let [newItemTel, setNewItemTel] = useState('')\r\n    let [error, setError] = useState<null | string>(null)\r\n\r\n    const onNewTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        {\r\n            setNewItemTitle(e.currentTarget.value)\r\n        }\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.ctrlKey && e.charCode === 13) {\r\n            props.addItem(newItemTitle, newItemTel);\r\n            setNewItemTitle('')\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (newItemTitle.trim() !== '') {\r\n            props.addItem(newItemTitle, newItemTel);\r\n            setNewItemTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"addItemForm\">\r\n            <TextField variant='outlined'\r\n                       value={newItemTitle}\r\n                       onChange={onNewTitleChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label={'Add new contact'}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addItem}><AddBox/></IconButton>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AddItemForm;","import React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\ntype PropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: PropsType) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n    let [newTitle, setNewTitle] = useState<string>(props.value)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true);\r\n        setNewTitle(props.value);\r\n    }\r\n    const deActiveEditMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(newTitle)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            props.onChange(newTitle);\r\n            deActiveEditMode();\r\n        }\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField variant='outlined'\r\n                value={newTitle}\r\n                autoFocus={true}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                onBlur={deActiveEditMode}\r\n            />\r\n            : <span>{props.value} <EditIcon onClick={activeEditMode} fontSize={\"small\"} color={\"inherit\"}/></span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React from 'react';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {ExpandLess, ExpandMore} from \"@material-ui/icons\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {ContactType} from '../../ContactList/ContactList';\r\nimport EditableSpan from \"../../../common/EditableSpan\";\r\n\r\n\r\ntype PropsType = {\r\n    onRemoveHandler: () => void\r\n    onChangeTitle: (title: string) => void\r\n    onChangeTel: (tel: string) => void\r\n    contact: ContactType\r\n    key: string\r\n\r\n}\r\n\r\nfunction Contact(props: PropsType) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open);\r\n    };\r\n    return (\r\n        <div>\r\n            <ListItem key={props.contact.id}>\r\n                <EditableSpan value={props.contact.title} onChange={props.onChangeTitle}/>\r\n                {open ? <ExpandLess onClick={handleClick}/> : <ExpandMore onClick={handleClick}/>}\r\n                <IconButton onClick={props.onRemoveHandler}><HighlightOffIcon color={\"error\"}/></IconButton>\r\n            </ListItem>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <ListItem>\r\n                    <ListItemIcon>\r\n                        <PhoneIcon/>\r\n                    </ListItemIcon>\r\n                    <EditableSpan value={props.contact.tel} onChange={props.onChangeTel}/>\r\n                </ListItem>\r\n            </Collapse>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {ContactType} from '../ContactList/ContactList';\r\nimport Contact from \"./Contact/Contact\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../state/store\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\ntype PropsType = {\r\n    contactList: Array<ContactType>\r\n    removeContact: (contactId: string) => void\r\n    changeTitle: (contactId: string, title: string) => void\r\n    changeTel: (contactId: string, tel: string) => void\r\n}\r\n\r\n\r\nfunction Contacts(props: PropsType) {\r\n    const [search, setSearch] = useState(\"\");\r\n    const contactList = useSelector<AppRootStateType, Array<ContactType>>(state => state.contactList)\r\n    const [filtered, setFiltered] = useState(contactList);\r\n    const [isHidden, setIsHidden] = useState(true);\r\n\r\n    const handleClick = () => {\r\n        setIsHidden(!isHidden);\r\n    }\r\n    useEffect(() => {\r\n        setFiltered(contactList.filter(c =>\r\n            c.title.toLowerCase().includes(search.toLowerCase())\r\n        ))\r\n    }, [search, contactList]);\r\n\r\n    return <div>\r\n        {!isHidden\r\n            ? <input\r\n                onDoubleClick={handleClick}\r\n                type=\"text\"\r\n                placeholder=\"Search contact...\"\r\n                onChange={e => setSearch(e.target.value)}\r\n            />\r\n            : <SearchIcon onClick={handleClick}/>}\r\n\r\n        {filtered.map(c => {\r\n            const onRemoveHandler = () => {\r\n                props.removeContact(c.id)\r\n            }\r\n            const onChangeTitle = (title: string) => {\r\n                props.changeTitle(c.id, title)\r\n            }\r\n            const onChangeTel = (tel: string) => {\r\n                props.changeTel(c.id, tel)\r\n            }\r\n            return <>\r\n                <Contact key={c.id} onRemoveHandler={onRemoveHandler} onChangeTitle={onChangeTitle}\r\n                         onChangeTel={onChangeTel}\r\n                         contact={c}/>\r\n            </>\r\n        })\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Contacts;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {Grid, List} from \"@material-ui/core\";\r\nimport {\r\n    addNewContact,\r\n    deleteContact,\r\n    setContactList,\r\n    updateContactTel,\r\n    updateContactTitle,\r\n} from \"../../../state/reducer\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../../state/store\";\r\nimport AddItemForm from \"../../common/AddItemForm\";\r\nimport Contacts from '../Contacts/Contacts';\r\n\r\n\r\nexport type ContactType = {\r\n    id: string\r\n    title: string\r\n    tel: string\r\n}\r\nexport type ContactListType = Array<ContactType>\r\n\r\n\r\nfunction ContactList() {\r\n    const contactList = useSelector<AppRootStateType, Array<ContactType>>(state => state.contactList)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (contactList) {\r\n            dispatch(setContactList())\r\n        }\r\n    }, [])\r\n\r\n    function removeContact(contactId: string) {\r\n        dispatch(deleteContact(contactId));\r\n    }\r\n\r\n    function addContact(title: string) {\r\n        dispatch(addNewContact(title));\r\n    }\r\n\r\n    function changeTitle(id: string, title: string) {\r\n        dispatch(updateContactTitle(id, title));\r\n    }\r\n\r\n    function changeTel(id: string, tel: string) {\r\n        dispatch(updateContactTel(id, tel))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={'contactList'}>\r\n            <Grid item>\r\n                <List style={{padding: '10px'}}>\r\n                    <AddItemForm addItem={addContact}/>\r\n                    <Contacts contactList={contactList}\r\n                              removeContact={removeContact}\r\n                              changeTitle={changeTitle}\r\n                              changeTel={changeTel}\r\n                    />\r\n                </List>\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactList;","import React from 'react';\nimport './App.css';\nimport Login from './components/Login/Login';\nimport {Route} from \"react-router-dom\";\nimport SearchAppBar from \"./components/MainPage/Header/Header\";\nimport ContactList from \"./components/MainPage/ContactList/ContactList\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <SearchAppBar/>\n            <div>\n                <Route path='/login' render={() => <Login/>}/>\n                <Route path='/contactsList' render={() => <ContactList/>}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {contactsReducer} from './reducer';\r\nimport {combineReducers, createStore, applyMiddleware} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nimport {reducer as reducerForm} from 'redux-form';\r\n\r\nconst rootReducer = combineReducers({\r\n    contactList: contactsReducer,\r\n    form: reducerForm,\r\n})\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport { store } from './state/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n  <Provider store={store}>\n    <App />\n  </Provider>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}